// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pubsub.proto

package pubsub

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Client struct {
	Id                   string   `protobuf:"bytes,2,opt,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Client) Reset()         { *m = Client{} }
func (m *Client) String() string { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()    {}
func (*Client) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{0}
}

func (m *Client) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Client.Unmarshal(m, b)
}
func (m *Client) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Client.Marshal(b, m, deterministic)
}
func (m *Client) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Client.Merge(m, src)
}
func (m *Client) XXX_Size() int {
	return xxx_messageInfo_Client.Size(m)
}
func (m *Client) XXX_DiscardUnknown() {
	xxx_messageInfo_Client.DiscardUnknown(m)
}

var xxx_messageInfo_Client proto.InternalMessageInfo

func (m *Client) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Channel struct {
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Topic                string   `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Channel) Reset()         { *m = Channel{} }
func (m *Channel) String() string { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()    {}
func (*Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{1}
}

func (m *Channel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Channel.Unmarshal(m, b)
}
func (m *Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Channel.Marshal(b, m, deterministic)
}
func (m *Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Channel.Merge(m, src)
}
func (m *Channel) XXX_Size() int {
	return xxx_messageInfo_Channel.Size(m)
}
func (m *Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_Channel proto.InternalMessageInfo

func (m *Channel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Channel) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type SubscribeResult struct {
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Type                 int32    `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Loop                 int32    `protobuf:"varint,4,opt,name=loop,proto3" json:"loop,omitempty"`
	Fast                 float32  `protobuf:"fixed32,5,opt,name=fast,proto3" json:"fast,omitempty"`
	Volume               float32  `protobuf:"fixed32,6,opt,name=Volume,proto3" json:"Volume,omitempty"`
	Pause                bool     `protobuf:"varint,7,opt,name=Pause,proto3" json:"Pause,omitempty"`
	Timestamp            int64    `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeResult) Reset()         { *m = SubscribeResult{} }
func (m *SubscribeResult) String() string { return proto.CompactTextString(m) }
func (*SubscribeResult) ProtoMessage()    {}
func (*SubscribeResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{2}
}

func (m *SubscribeResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeResult.Unmarshal(m, b)
}
func (m *SubscribeResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeResult.Marshal(b, m, deterministic)
}
func (m *SubscribeResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResult.Merge(m, src)
}
func (m *SubscribeResult) XXX_Size() int {
	return xxx_messageInfo_SubscribeResult.Size(m)
}
func (m *SubscribeResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResult.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResult proto.InternalMessageInfo

func (m *SubscribeResult) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *SubscribeResult) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *SubscribeResult) GetLoop() int32 {
	if m != nil {
		return m.Loop
	}
	return 0
}

func (m *SubscribeResult) GetFast() float32 {
	if m != nil {
		return m.Fast
	}
	return 0
}

func (m *SubscribeResult) GetVolume() float32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *SubscribeResult) GetPause() bool {
	if m != nil {
		return m.Pause
	}
	return false
}

func (m *SubscribeResult) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type PulishMessage struct {
	Topic                *Channel         `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Result               *SubscribeResult `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PulishMessage) Reset()         { *m = PulishMessage{} }
func (m *PulishMessage) String() string { return proto.CompactTextString(m) }
func (*PulishMessage) ProtoMessage()    {}
func (*PulishMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_91df006b05e20cf7, []int{3}
}

func (m *PulishMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PulishMessage.Unmarshal(m, b)
}
func (m *PulishMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PulishMessage.Marshal(b, m, deterministic)
}
func (m *PulishMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulishMessage.Merge(m, src)
}
func (m *PulishMessage) XXX_Size() int {
	return xxx_messageInfo_PulishMessage.Size(m)
}
func (m *PulishMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PulishMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PulishMessage proto.InternalMessageInfo

func (m *PulishMessage) GetTopic() *Channel {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *PulishMessage) GetResult() *SubscribeResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*Client)(nil), "Client")
	proto.RegisterType((*Channel)(nil), "Channel")
	proto.RegisterType((*SubscribeResult)(nil), "SubscribeResult")
	proto.RegisterType((*PulishMessage)(nil), "PulishMessage")
}

func init() { proto.RegisterFile("pubsub.proto", fileDescriptor_91df006b05e20cf7) }

var fileDescriptor_91df006b05e20cf7 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x51, 0xed, 0x6a, 0xea, 0x40,
	0x10, 0x65, 0xa3, 0x46, 0x1d, 0xef, 0x55, 0x59, 0x2e, 0xb2, 0x78, 0x2f, 0x97, 0x90, 0x3f, 0x4d,
	0xff, 0x44, 0xab, 0x8f, 0x20, 0xa5, 0x08, 0x2d, 0x48, 0x84, 0x42, 0x7f, 0x26, 0x3a, 0xc6, 0xd0,
	0x4d, 0x36, 0x64, 0x77, 0x0b, 0xbe, 0x48, 0x5f, 0xa2, 0x2f, 0x59, 0x76, 0x13, 0xed, 0xd7, 0xbf,
	0x33, 0x67, 0x76, 0x66, 0xce, 0xd9, 0x03, 0xbf, 0x4a, 0x9d, 0x48, 0x9d, 0x84, 0x65, 0x25, 0x94,
	0x98, 0xfe, 0x4d, 0x85, 0x48, 0x39, 0xce, 0x6c, 0x95, 0xe8, 0xc3, 0x0c, 0xf3, 0x52, 0x9d, 0xea,
	0xa6, 0xcf, 0xc0, 0x5d, 0xf1, 0x0c, 0x0b, 0x45, 0x87, 0xe0, 0xac, 0xf7, 0xcc, 0xf1, 0x48, 0xd0,
	0x8f, 0x9c, 0xf5, 0xde, 0x5f, 0x42, 0x77, 0x75, 0x8c, 0x8b, 0x02, 0x39, 0xa5, 0xd0, 0x2e, 0xe2,
	0x1c, 0x9b, 0xa6, 0xc5, 0xf4, 0x0f, 0x74, 0x94, 0x28, 0xb3, 0x1d, 0x6b, 0x59, 0xb2, 0x2e, 0xfc,
	0x37, 0x02, 0xa3, 0xad, 0x4e, 0xe4, 0xae, 0xca, 0x12, 0x8c, 0x50, 0x6a, 0xae, 0xe8, 0x18, 0x5a,
	0xb9, 0x4c, 0x9b, 0x61, 0x03, 0xcd, 0x3e, 0x75, 0x2a, 0xd1, 0x8e, 0x76, 0x22, 0x8b, 0x0d, 0xc7,
	0x85, 0x28, 0x59, 0xbb, 0xe6, 0x0c, 0x36, 0xdc, 0x21, 0x96, 0x8a, 0x75, 0x3c, 0x12, 0x38, 0x91,
	0xc5, 0x74, 0x02, 0xee, 0xa3, 0xe0, 0x3a, 0x47, 0xe6, 0x5a, 0xb6, 0xa9, 0x8c, 0x9e, 0x4d, 0xac,
	0x25, 0xb2, 0xae, 0x47, 0x82, 0x5e, 0x54, 0x17, 0xf4, 0x1f, 0xf4, 0x55, 0x96, 0xa3, 0x54, 0x71,
	0x5e, 0xb2, 0x9e, 0x47, 0x82, 0x56, 0xf4, 0x41, 0xf8, 0x4f, 0xf0, 0x7b, 0xa3, 0x79, 0x26, 0x8f,
	0x0f, 0x28, 0x65, 0x9c, 0x22, 0xfd, 0x7f, 0x36, 0x65, 0xc4, 0x0e, 0x16, 0xbd, 0xb0, 0xf9, 0x81,
	0xc6, 0x1e, 0x0d, 0xc0, 0xad, 0xac, 0x29, 0x2b, 0x7d, 0xb0, 0x18, 0x87, 0xdf, 0xcc, 0x46, 0x4d,
	0x7f, 0xf1, 0x4a, 0xcc, 0x6e, 0x93, 0xc2, 0x16, 0xab, 0x97, 0x6c, 0x87, 0xf4, 0x06, 0xba, 0x1b,
	0x9d, 0x98, 0x6b, 0x74, 0x18, 0x7e, 0x39, 0x3b, 0x9d, 0x84, 0x75, 0x44, 0xe1, 0x39, 0xa2, 0xf0,
	0xd6, 0x44, 0x44, 0xaf, 0xa1, 0x7f, 0xd9, 0x4f, 0x2f, 0x62, 0xa6, 0x3f, 0xae, 0xce, 0x09, 0xbd,
	0x82, 0xd1, 0x1d, 0xaa, 0xfa, 0xc5, 0x33, 0xbf, 0xcf, 0xa4, 0xfa, 0x34, 0x70, 0x41, 0x73, 0x92,
	0xb8, 0xf6, 0xc6, 0xf2, 0x3d, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x45, 0xba, 0x0b, 0x24, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PubsubServiceClient is the client API for PubsubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PubsubServiceClient interface {
	Publish(ctx context.Context, in *PulishMessage, opts ...grpc.CallOption) (*empty.Empty, error)
	Subscribe(ctx context.Context, in *Channel, opts ...grpc.CallOption) (PubsubService_SubscribeClient, error)
	GetChanneklList(ctx context.Context, in *Channel, opts ...grpc.CallOption) (PubsubService_GetChanneklListClient, error)
}

type pubsubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPubsubServiceClient(cc grpc.ClientConnInterface) PubsubServiceClient {
	return &pubsubServiceClient{cc}
}

func (c *pubsubServiceClient) Publish(ctx context.Context, in *PulishMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/PubsubService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubsubServiceClient) Subscribe(ctx context.Context, in *Channel, opts ...grpc.CallOption) (PubsubService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PubsubService_serviceDesc.Streams[0], "/PubsubService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubsubServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PubsubService_SubscribeClient interface {
	Recv() (*SubscribeResult, error)
	grpc.ClientStream
}

type pubsubServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *pubsubServiceSubscribeClient) Recv() (*SubscribeResult, error) {
	m := new(SubscribeResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pubsubServiceClient) GetChanneklList(ctx context.Context, in *Channel, opts ...grpc.CallOption) (PubsubService_GetChanneklListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PubsubService_serviceDesc.Streams[1], "/PubsubService/GetChanneklList", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubsubServiceGetChanneklListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PubsubService_GetChanneklListClient interface {
	Recv() (*Channel, error)
	grpc.ClientStream
}

type pubsubServiceGetChanneklListClient struct {
	grpc.ClientStream
}

func (x *pubsubServiceGetChanneklListClient) Recv() (*Channel, error) {
	m := new(Channel)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PubsubServiceServer is the server API for PubsubService service.
type PubsubServiceServer interface {
	Publish(context.Context, *PulishMessage) (*empty.Empty, error)
	Subscribe(*Channel, PubsubService_SubscribeServer) error
	GetChanneklList(*Channel, PubsubService_GetChanneklListServer) error
}

// UnimplementedPubsubServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPubsubServiceServer struct {
}

func (*UnimplementedPubsubServiceServer) Publish(ctx context.Context, req *PulishMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedPubsubServiceServer) Subscribe(req *Channel, srv PubsubService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedPubsubServiceServer) GetChanneklList(req *Channel, srv PubsubService_GetChanneklListServer) error {
	return status.Errorf(codes.Unimplemented, "method GetChanneklList not implemented")
}

func RegisterPubsubServiceServer(s *grpc.Server, srv PubsubServiceServer) {
	s.RegisterService(&_PubsubService_serviceDesc, srv)
}

func _PubsubService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PulishMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubsubServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PubsubService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubsubServiceServer).Publish(ctx, req.(*PulishMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubsubService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Channel)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PubsubServiceServer).Subscribe(m, &pubsubServiceSubscribeServer{stream})
}

type PubsubService_SubscribeServer interface {
	Send(*SubscribeResult) error
	grpc.ServerStream
}

type pubsubServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *pubsubServiceSubscribeServer) Send(m *SubscribeResult) error {
	return x.ServerStream.SendMsg(m)
}

func _PubsubService_GetChanneklList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Channel)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PubsubServiceServer).GetChanneklList(m, &pubsubServiceGetChanneklListServer{stream})
}

type PubsubService_GetChanneklListServer interface {
	Send(*Channel) error
	grpc.ServerStream
}

type pubsubServiceGetChanneklListServer struct {
	grpc.ServerStream
}

func (x *pubsubServiceGetChanneklListServer) Send(m *Channel) error {
	return x.ServerStream.SendMsg(m)
}

var _PubsubService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PubsubService",
	HandlerType: (*PubsubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _PubsubService_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _PubsubService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetChanneklList",
			Handler:       _PubsubService_GetChanneklList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pubsub.proto",
}
